generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("WHATSAPP_DATABASE_URL")
}

model WppClient {
    id            Int           @id @default(autoincrement())
    name          String
    phone         String?
    instance      String        @map("instance")
    type          WppClientType
    isActive      Boolean       @map("is_active")
    WABAPhoneId   String?       @map("waba_phone_id")
    WABAAccountId String?       @map("waba_account_id")
    WABAToken     String?       @map("waba_token")
    WppSector     WppSector[]

    @@unique([instance, name])
    @@index([isActive])
    @@map("clients")
}

model WppContact {
    id          Int     @id @default(autoincrement())
    name        String
    phone       String
    customerId  Int?    @map("customer_id")
    instance    String  @map("instance")
    isDeleted   Boolean @default(false) @map("is_deleted")
    isBlocked   Boolean @default(false) @map("is_blocked")
    isOnlyAdmin Boolean @default(false) @map("is_only_admin")

    WppChat     WppChat[]
    WppMessage  WppMessage[]
    WppSchedule WppSchedule[]

    @@unique([instance, phone])
    @@index([customerId, instance])
    @@map("contacts")
}

model WppMessage {
    id         Int              @id @default(autoincrement())
    instance   String           @map("instance")
    wwebjsId   String?          @unique @map("wwebjs_id")
    wabaId     String?          @unique @map("waba_id")
    from       String
    to         String
    type       String
    quotedId   Int?             @map("quoted_id")
    chatId     Int?             @map("chat_id")
    contactId  Int?             @map("contact_id")
    body       String
    timestamp  String
    status     WppMessageStatus
    fileId     Int?             @map("file_id")
    fileName   String?          @map("file_name")
    fileType   String?          @map("file_type")
    fileSize   String?          @map("file_size")
    WppChat    WppChat?         @relation(fields: [chatId], references: [id])
    WppContact WppContact?      @relation(fields: [contactId], references: [id], onDelete: SetNull, onUpdate: Cascade)

    @@index([from, to, chatId])
    @@map("messages")
}

model WppChat {
    id         Int             @id @default(autoincrement())
    instance   String          @map("instance")
    contactId  Int?            @map("contact_id")
    userId     Int?            @map("user_id")
    walletId   Int?            @map("wallet_id")
    botId      Int?            @map("bot_id")
    resultId   Int?            @map("result_id")
    sectorId   Int?            @map("sector_id")
    type       WppChatType
    priority   WppChatPriority @default(NORMAL)
    avatarUrl  String?         @map("avatar_url")
    isFinished Boolean         @default(false) @map("is_finished")
    startedAt  DateTime?       @map("started_at")
    finishedAt DateTime?       @map("finished_at")
    finishedBy Int?            @map("finished_by")
    isSchedule Boolean         @default(false) @map("is_schedule")
    wppTags    WppTag[]

    contact WppContact? @relation(fields: [contactId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    wallet  WppWallet?  @relation(fields: [walletId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    sector  WppSector?  @relation(fields: [sectorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

    messages WppMessage[]

    @@index([userId])
    @@map("chats")
}
model InternalContact {
  id         Int               @id @default(autoincrement())
  name       String
  phone      String            // pode ser userId ou operador
  userId     Int?              @map("user_id")
  instance   String            @map("instance")
  isDeleted  Boolean           @default(false) @map("is_deleted")
  isBlocked  Boolean           @default(false) @map("is_blocked")
  isOnlyAdmin Boolean          @default(false) @map("is_only_admin")

  // Relações
  messages     InternalMessage[]
  memberships  InternalChatMember[]
  contactChats InternalChat[]     @relation("InternalChatContact")

  @@unique([instance, phone])
  @@index([userId, instance])
  @@map("internalcontacts")
}


model InternalMessage {
  id                 Int               @id @default(autoincrement())
  instance           String            @map("instance")
  from               String            // "me:<id>" ou "user:<id>"
  to                 String            // para diretas, phone; para grupo, usa groupId tag
  type               String
  quotedId           Int?              @map("quoted_id")
  internalchatId     Int?              @map("internalchat_id")
  internalcontactId  Int?              @map("internalcontact_id")
  body               String
  timestamp          DateTime          @map("timestamp")
  status             WppMessageStatus
  fileId             Int?              @map("file_id")
  fileName           String?           @map("file_name")
  fileType           String?           @map("file_type")
  fileSize           String?           @map("file_size")

  // Relações
  chat    InternalChat?    @relation(fields: [internalchatId],    references: [id])
  contact InternalContact? @relation(fields: [internalcontactId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([from, to, internalchatId])
  @@map("internalmessages")
}

model InternalChat {
    id                  Int                   @id @default(autoincrement())
    instance            String                @map("instance")
    internalcontactId   Int?                  @map("internalcontact_id")
    userId              Int?                  @map("user_id")
    sectorId            Int?                  @map("sector_id")
    avatarUrl           String?               @map("avatar_url")
    isFinished          Boolean               @default(false) @map("is_finished")
    startedAt           DateTime?             @map("started_at")
    finishedAt          DateTime?             @map("finished_at")
    finishedBy          Int?                  @map("finished_by")
    isGroup             Boolean               @default(false) @map("is_group")

    groupName           String?               @map("group_name")
    groupDescription    String?               @map("group_description")
    groupCreatedBy      Int?                  @map("group_created_by")
    groupCreatedAt      DateTime?             @map("group_created_at")

  	contact  InternalContact?  @relation("InternalChatContact", fields: [internalcontactId],    references: [id], onDelete: SetNull, onUpdate: Cascade)
    sector       WppSector?                   @relation(fields: [sectorId],           references: [id], onDelete: SetNull, onUpdate: Cascade)
    messages     InternalMessage[]
    members      InternalChatMember[]
    tags         InternalChatTag[]

    @@index([userId])
    @@map("internalchats")
}
model InternalChatMember {
  internalchatId    Int
  internalcontactId Int
  joinedAt          DateTime @default(now()) @map("joined_at")
  lastReadAt        DateTime?               @map("last_read_at")

  chat    InternalChat    @relation(fields: [internalchatId],    references: [id], onDelete: Cascade)
  contact InternalContact @relation(fields: [internalcontactId], references: [id], onDelete: Cascade)

  @@id([internalchatId, internalcontactId])
  @@map("internal_chat_members")
}
model InternalChatTag {
  internalchatId Int
  tagId          Int

  chat InternalChat @relation(fields: [internalchatId], references: [id], onDelete: Cascade)
  tag  WppTag       @relation(fields: [tagId],           references: [id], onDelete: Cascade)

  @@id([internalchatId, tagId])
  @@map("internal_chat_tags")
}

model WppTag {
    id        Int       @id @default(autoincrement())
    instance  String    @map("instance")
    name      String
    color     String    @map("bg_color")
    wppChatId Int?
    wppChats  WppChat[]

    @@unique([name])
    @@map("tags")
    InternalChatTag InternalChatTag[]
}

model WppSector {
    id            Int     @id @default(autoincrement())
    name          String
    instance      String  @map("instance")
    wppInstanceId Int?    @map("wpp_instance_id")
    startChats    Boolean @map("start_chats")
    receiveChats  Boolean @map("receive_chats")

    WppInstance   WppClient?      @relation(fields: [wppInstanceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    WppChat       WppChat[]
    WppSchedule   WppSchedule[]

    @@unique([instance, name])
    @@map("sectors")
    InternalChat InternalChat[]
}

model WppMessageFlow {
    id          Int      @id @default(autoincrement())
    instance    String   @map("instance")
    sectorId    Int      @map("sector_id")
    description String?
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    WppMessageFlowStep WppMessageFlowStep[]

    @@unique([instance, sectorId])
    @@map("message_flows")
}

model WppMessageFlowStep {
    id            Int                    @id @default(autoincrement())
    type          WppMessageFlowStepType
    messageFlowId Int                    @map("message_flow_id")
    stepNumber    Int                    @map("step_number")
    createdAt     DateTime               @default(now()) @map("created_at")
    updatedAt     DateTime               @updatedAt @map("updated_at")

    WppMessageFlow WppMessageFlow @relation(fields: [messageFlowId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([messageFlowId, stepNumber])
    @@map("message_flows_steps")
}

model WppWallet {
    instance      String          @map("instance")
    id            Int             @id @default(autoincrement())
    name          String
    WppChat       WppChat[]
    WppWalletUser WppWalletUser[]

    @@map("wallets")
}

model WppSchedule {
    instance     String
    id           Int      @id @default(autoincrement())
    name         String
    contactId    Int      @map("contact_id")
    scheduleDate DateTime @map("schedule_date")
    scheduledBy  Int      @map("scheduled_by")
    scheduledFor Int      @map("scheduled_for")
    sectorId     Int      @map("sector_id")

    contact WppContact @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    sector  WppSector  @relation(fields: [sectorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map("schedules")
}

model WppWalletUser {
    walletId  Int        @map("wallet_id")
    userId    Int        @map("user_id")
    WppWallet WppWallet? @relation(fields: [walletId], references: [id])

    @@unique([walletId, userId])
    @@map("wallets_users")
}

enum WppMessageStatus {
    PENDING
    SENT
    RECEIVED
    READ
    DOWNLOADED
    ERROR
    REVOKED

    @@map("message_status")
}

enum WppClientType {
    WABA
    WWEBJS

    @@map("client_type")
}

enum WppChatType {
    RECEPTIVE
    ACTIVE

    @@map("chat_type")
}

enum WppChatPriority {
    LOW
    NORMAL
    HIGH
    VERY_HIGH
    URGENCY

    @@map("chat_priority")
}

enum WppMessageFlowStepType {
    CHECK_AVAILABLE_USERS
    CHECK_LOALTY
    CHECK_ONLY_ADMIN
    SEND_TO_ADMIN

    @@map("message_flow_step_type")
}
